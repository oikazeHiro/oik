// source: Message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.Message.ChatMsg', null, global);
goog.exportSymbol('proto.Message.ChatMsgAll', null, global);
goog.exportSymbol('proto.Message.ChatMsgByGroup', null, global);
goog.exportSymbol('proto.Message.Msg', null, global);
goog.exportSymbol('proto.Message.Msg.DataType', null, global);
goog.exportSymbol('proto.Message.Msg.DatabodyCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message.Msg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Message.Msg.oneofGroups_);
};
goog.inherits(proto.Message.Msg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message.Msg.displayName = 'proto.Message.Msg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message.ChatMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message.ChatMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message.ChatMsg.displayName = 'proto.Message.ChatMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message.ChatMsgByGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message.ChatMsgByGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message.ChatMsgByGroup.displayName = 'proto.Message.ChatMsgByGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message.ChatMsgAll = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message.ChatMsgAll, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message.ChatMsgAll.displayName = 'proto.Message.ChatMsgAll';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Message.Msg.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.Message.Msg.DatabodyCase = {
  DATABODY_NOT_SET: 0,
  CHATMSG: 2,
  CHATMSGALL: 3,
  CHATMSGBYGROUP: 4
};

/**
 * @return {proto.Message.Msg.DatabodyCase}
 */
proto.Message.Msg.prototype.getDatabodyCase = function() {
  return /** @type {proto.Message.Msg.DatabodyCase} */(jspb.Message.computeOneofCase(this, proto.Message.Msg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.Msg.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.Msg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message.Msg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.Msg.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chatmsg: (f = msg.getChatmsg()) && proto.Message.ChatMsg.toObject(includeInstance, f),
    chatmsgall: (f = msg.getChatmsgall()) && proto.Message.ChatMsgAll.toObject(includeInstance, f),
    chatmsgbygroup: (f = msg.getChatmsgbygroup()) && proto.Message.ChatMsgByGroup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message.Msg}
 */
proto.Message.Msg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message.Msg;
  return proto.Message.Msg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message.Msg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message.Msg}
 */
proto.Message.Msg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Message.Msg.DataType} */ (reader.readEnum());
      msg.setDataType(value);
      break;
    case 2:
      var value = new proto.Message.ChatMsg;
      reader.readMessage(value,proto.Message.ChatMsg.deserializeBinaryFromReader);
      msg.setChatmsg(value);
      break;
    case 3:
      var value = new proto.Message.ChatMsgAll;
      reader.readMessage(value,proto.Message.ChatMsgAll.deserializeBinaryFromReader);
      msg.setChatmsgall(value);
      break;
    case 4:
      var value = new proto.Message.ChatMsgByGroup;
      reader.readMessage(value,proto.Message.ChatMsgByGroup.deserializeBinaryFromReader);
      msg.setChatmsgbygroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.Msg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message.Msg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message.Msg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.Msg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChatmsg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Message.ChatMsg.serializeBinaryToWriter
    );
  }
  f = message.getChatmsgall();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Message.ChatMsgAll.serializeBinaryToWriter
    );
  }
  f = message.getChatmsgbygroup();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Message.ChatMsgByGroup.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Message.Msg.DataType = {
  CHATMSGTYPE: 0,
  CHATMSGALLTYPE: 1,
  CHATMSGBYGROUPTYPE: 2
};

/**
 * optional DataType data_type = 1;
 * @return {!proto.Message.Msg.DataType}
 */
proto.Message.Msg.prototype.getDataType = function() {
  return /** @type {!proto.Message.Msg.DataType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Message.Msg.DataType} value
 * @return {!proto.Message.Msg} returns this
 */
proto.Message.Msg.prototype.setDataType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ChatMsg chatMsg = 2;
 * @return {?proto.Message.ChatMsg}
 */
proto.Message.Msg.prototype.getChatmsg = function() {
  return /** @type{?proto.Message.ChatMsg} */ (
    jspb.Message.getWrapperField(this, proto.Message.ChatMsg, 2));
};


/**
 * @param {?proto.Message.ChatMsg|undefined} value
 * @return {!proto.Message.Msg} returns this
*/
proto.Message.Msg.prototype.setChatmsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Message.Msg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message.Msg} returns this
 */
proto.Message.Msg.prototype.clearChatmsg = function() {
  return this.setChatmsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.Msg.prototype.hasChatmsg = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChatMsgAll chatMsgAll = 3;
 * @return {?proto.Message.ChatMsgAll}
 */
proto.Message.Msg.prototype.getChatmsgall = function() {
  return /** @type{?proto.Message.ChatMsgAll} */ (
    jspb.Message.getWrapperField(this, proto.Message.ChatMsgAll, 3));
};


/**
 * @param {?proto.Message.ChatMsgAll|undefined} value
 * @return {!proto.Message.Msg} returns this
*/
proto.Message.Msg.prototype.setChatmsgall = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Message.Msg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message.Msg} returns this
 */
proto.Message.Msg.prototype.clearChatmsgall = function() {
  return this.setChatmsgall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.Msg.prototype.hasChatmsgall = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ChatMsgByGroup chatMsgByGroup = 4;
 * @return {?proto.Message.ChatMsgByGroup}
 */
proto.Message.Msg.prototype.getChatmsgbygroup = function() {
  return /** @type{?proto.Message.ChatMsgByGroup} */ (
    jspb.Message.getWrapperField(this, proto.Message.ChatMsgByGroup, 4));
};


/**
 * @param {?proto.Message.ChatMsgByGroup|undefined} value
 * @return {!proto.Message.Msg} returns this
*/
proto.Message.Msg.prototype.setChatmsgbygroup = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.Message.Msg.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message.Msg} returns this
 */
proto.Message.Msg.prototype.clearChatmsgbygroup = function() {
  return this.setChatmsgbygroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.Msg.prototype.hasChatmsgbygroup = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.ChatMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.ChatMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message.ChatMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.ChatMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    acceptid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message.ChatMsg}
 */
proto.Message.ChatMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message.ChatMsg;
  return proto.Message.ChatMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message.ChatMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message.ChatMsg}
 */
proto.Message.ChatMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAcceptid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.ChatMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message.ChatMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message.ChatMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.ChatMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAcceptid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.Message.ChatMsg.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message.ChatMsg} returns this
 */
proto.Message.ChatMsg.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string acceptId = 2;
 * @return {string}
 */
proto.Message.ChatMsg.prototype.getAcceptid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message.ChatMsg} returns this
 */
proto.Message.ChatMsg.prototype.setAcceptid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.Message.ChatMsg.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message.ChatMsg} returns this
 */
proto.Message.ChatMsg.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.ChatMsgByGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.ChatMsgByGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message.ChatMsgByGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.ChatMsgByGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    group: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message.ChatMsgByGroup}
 */
proto.Message.ChatMsgByGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message.ChatMsgByGroup;
  return proto.Message.ChatMsgByGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message.ChatMsgByGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message.ChatMsgByGroup}
 */
proto.Message.ChatMsgByGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroup(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.ChatMsgByGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message.ChatMsgByGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message.ChatMsgByGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.ChatMsgByGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroup();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.Message.ChatMsgByGroup.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message.ChatMsgByGroup} returns this
 */
proto.Message.ChatMsgByGroup.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string group = 2;
 * @return {string}
 */
proto.Message.ChatMsgByGroup.prototype.getGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message.ChatMsgByGroup} returns this
 */
proto.Message.ChatMsgByGroup.prototype.setGroup = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.Message.ChatMsgByGroup.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message.ChatMsgByGroup} returns this
 */
proto.Message.ChatMsgByGroup.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.ChatMsgAll.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.ChatMsgAll.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message.ChatMsgAll} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.ChatMsgAll.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message.ChatMsgAll}
 */
proto.Message.ChatMsgAll.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message.ChatMsgAll;
  return proto.Message.ChatMsgAll.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message.ChatMsgAll} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message.ChatMsgAll}
 */
proto.Message.ChatMsgAll.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.ChatMsgAll.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message.ChatMsgAll.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message.ChatMsgAll} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.ChatMsgAll.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.Message.ChatMsgAll.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message.ChatMsgAll} returns this
 */
proto.Message.ChatMsgAll.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.Message.ChatMsgAll.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message.ChatMsgAll} returns this
 */
proto.Message.ChatMsgAll.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.Message);
